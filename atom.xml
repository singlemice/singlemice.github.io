<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[TaurenDruid's Blog]]></title>
  <subtitle><![CDATA[MySQL Linux Oracle Python ..]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.taurendruid.com/"/>
  <updated>2014-12-28T14:37:48.343Z</updated>
  <id>http://blog.taurendruid.com/</id>
  
  <author>
    <name><![CDATA[TaurenDruid]]></name>
    <email><![CDATA[singlemice@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[mongodb Many-to-Many Relations]]></title>
    <link href="http://blog.taurendruid.com/2014/12/28/mongodb-Many-to-Many-Relations/"/>
    <id>http://blog.taurendruid.com/2014/12/28/mongodb-Many-to-Many-Relations/</id>
    <published>2014-12-28T13:52:03.000Z</published>
    <updated>2014-12-28T14:37:22.000Z</updated>
    <content type="html"><![CDATA[<p>本文是对mongodb应用设计模式的一节笔记;</p>
<p>使用mongodb的document references的典型案例是many-to-many 或者 M:N的关系。每个产品可能在多个类别里，并且每个分类有多个产品。我们可以模拟一个多对多的schema并且使用一个”join collection”:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// db.product schema</div><div class="line">{ <span class="string">"_id"</span>: <span class="string">"My Product"</span>, <span class="keyword">...</span> } </div><div class="line"></div><div class="line">// db.category schema</div><div class="line">{ <span class="string">"_id"</span>: <span class="string">"My Category"</span>, <span class="keyword">...</span> }</div><div class="line"></div><div class="line">// db.product_category schema</div><div class="line">{ <span class="string">"_id"</span>: ObjectId(<span class="keyword">...</span>),</div><div class="line">  <span class="string">"product_id"</span>: <span class="string">"My Product"</span>,</div><div class="line">  <span class="string">"category_id"</span>: <span class="string">"My Category"</span> }</div></pre></td></tr></table></figure>

<p>虽然这个方法给了我们一个恰到好处的规范化的model,最终我们的查询要做大量应用级别的“join”</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_product_with_categories</span><span class="params">(product_id)</span>:</span></div><div class="line">	product = db.product.find_one({<span class="string">"_id"</span>: product_id}) </div><div class="line"></div><div class="line">	category_ids = [</div><div class="line">		p_c[<span class="string">'category_id'</span>]</div><div class="line">		f	<span class="keyword">or</span> p_c <span class="keyword">in</span> db.product_category.find(</div><div class="line">                { <span class="string">"product_id"</span>: product_id }) ]</div><div class="line">    categories = db.category.find({</div><div class="line">		<span class="string">"_id"</span>: { <span class="string">"$in"</span>: category_ids } }) </div><div class="line"></div><div class="line">		<span class="keyword">return</span> product, categories</div></pre></td></tr></table></figure>

<p>获取一个分类以及它的产品同样很复杂。或者我们可以把对象完整的嵌入到另一个里面：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// db.product schema</div><div class="line">    { <span class="string">"_id"</span>: <span class="string">"My Product"</span>,</div><div class="line">      <span class="string">"categories"</span>: [</div><div class="line">          { <span class="string">"_id"</span>: <span class="string">"My Category"</span>, <span class="keyword">...</span> }</div><div class="line">          <span class="keyword">...</span>] }</div><div class="line">    // db.category schema</div><div class="line">    { <span class="string">"_id"</span>: <span class="string">"My Category"</span>,</div><div class="line">      <span class="string">"products"</span>: [</div><div class="line">        { <span class="string">"_id"</span>: <span class="string">"My Product"</span>, <span class="keyword">...</span> }</div><div class="line">        <span class="keyword">...</span>] }</div></pre></td></tr></table></figure>

<p>查询现在更加简单：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_product_with_categories</span><span class="params">(product_id)</span>:</span></div><div class="line">	<span class="keyword">return</span> db.product.find_one({<span class="string">"_id"</span>: product_id})</div></pre></td></tr></table></figure>

<p>当然如果你想更新一个产品或分类，我们必须更新它和它所在的collections和它所嵌入的其它文档。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_product</span><span class="params">(product)</span>:</span> </div><div class="line">	db.product.save(product) </div><div class="line">	db.category.update(</div><div class="line">    	{ <span class="string">'products._id'</span>: product[<span class="string">'_id'</span>] },</div><div class="line">        { <span class="string">'$set'</span>: { <span class="string">'products.*'</span>: product } },</div><div class="line">        multi=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>

<p>对于many-to-many join,一个妥协的方法常常是取好的，把_id值嵌入而不是嵌入整个文档。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// db.product schema</div><div class="line">   { <span class="string">"_id"</span>: <span class="string">"My Product"</span>,</div><div class="line">     <span class="string">"category_ids"</span>: [ <span class="string">"My Category"</span>, <span class="keyword">...</span> ] }</div><div class="line">// db.category schema</div><div class="line">{ <span class="string">"_id"</span>: <span class="string">"My Category"</span> }</div></pre></td></tr></table></figure>

<p>现在我们的查询有一点复杂，但是现在不需要担心更新包含在每个分类里的产品了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_product_with_categories</span><span class="params">(product_id)</span>:</span></div><div class="line">	product = db.product.find_one({<span class="string">"_id"</span>: product_id}) </div><div class="line"></div><div class="line">	categories = list(db.category.find({</div><div class="line"></div><div class="line">		<span class="string">'_id'</span>: {<span class="string">'$in'</span>: product[<span class="string">'category_ids'</span>]} })) 	</div><div class="line"></div><div class="line">	<span class="keyword">return</span> product, categories</div></pre></td></tr></table></figure>

<p>MongoDB中Schema设计相比科学更趋向于一件艺术品，而你需要早做决的定是否嵌入一个一对多的关系作为一个子文档，还是遵循多个关系的方法并且通过id的值作为reference documents 。</p>
<p>嵌入子文档的两个最大的好处是于，一个文档中的数据局部性和在MongoDB中使原子更新文件（但不是两个文件）的能力。权衡这些好处是灵活性降低，当你嵌入，因为你已经“预连接”您的文档，如果你有一个高度的关系，这将是一个潜在的问题。。<br>    最终，决定取决于应用程序的访问模式，并且在MongoDB中有关系数据库中较少的硬和快速的规则。明智地使用MongoDB的是让你在架构设计上的灵活性将帮助您得到最出这个强大的非关系型数据库。</p>
]]></content>
    <summary type="html">
    <![CDATA[mongodb多对多关系设计]]>
    
    </summary>
    
      <category term="mongodb" scheme="http://blog.taurendruid.com/tags/mongodb/"/>
    
      <category term="mongodb" scheme="http://blog.taurendruid.com/categories/mongodb/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mydumper backup and restore]]></title>
    <link href="http://blog.taurendruid.com/2014/12/27/mydumper-backup-and-restore/"/>
    <id>http://blog.taurendruid.com/2014/12/27/mydumper-backup-and-restore/</id>
    <published>2014-12-27T04:26:37.000Z</published>
    <updated>2014-12-27T09:40:50.000Z</updated>
    <content type="html"><![CDATA[<p>mydumper是一个多线程备份工具，相比其它逻辑备份工具有些复杂，需要协调所有的线程保持快照一致性。</p>
<p>mydumper默认使用4个线程dump data和1个主线程</p>
<ul>
<li><p>Main Thread</p>
<ul>
<li>FLUSH TABLES WITH READ LOCK</li>
</ul>
</li>
<li><p>Dump Thread X</p>
<ul>
<li>Start Transaction with nsistent snapshop;</li>
<li>dump non-InnoDB tables</li>
</ul>
</li>
<li><p>Main Thread</p>
<ul>
<li>UNLOCK TABLES</li>
</ul>
</li>
<li><p>Dump Thread X</p>
<ul>
<li>dump InnoDB tables</li>
</ul>
</li>
</ul>
<p><h2>Backup</h2><br><code><br>mydumper -o /data/backup -r 100000 -c -e  -L mysql-backup.log -u USERNAME -p PASSWORD -h MySQL-Server -t 2 -v 3<br></code></p>
<ul>
<li>-o: Output directory (where the backup is saved)</li>
<li>-r: Number of rows in a chunk</li>
<li>-c: Compression!</li>
<li><p>-e: Build dump files even if no data available from table</p>
</li>
<li><p>-L: Logfile to write to</p>
</li>
<li>-t: Number of parallel threads (I used 2 since the backup’ed host is on a server with high I/O and I didn’t want to cause too much delay in the slave replication because of high I/O wait</li>
<li>-v: Level of verbosity</li>
</ul>
<p>在/data/backu目录下会有大量dump-files，至少有一个metadata文件，里面保存了binlog 信息</p>
<p><h2>Import</h2><br><code><br>myloader —regex “^log.log_2014*” -d /data/backup -q 10000 -o -h MySQL-Target-Host -u USERNAME -p PASSWORD -v 3 -C -t 4<br></code></p>
<p>选项同上</p>
<h1 id="Notice">Notice</h1>
<p><b><br>mydumper doesn’t dump database schemas. You’ll have to do this on your own and import them manually to the target hsot for your data-import BEFORE you’re using myloader.<br>I’ll update this article later and post a short script for ex- and import of all database schemas on a server.<br></b></p>
]]></content>
    <summary type="html">
    <![CDATA[mydumper是一个多线程逻辑备份工具]]>
    
    </summary>
    
      <category term="mysql" scheme="http://blog.taurendruid.com/tags/mysql/"/>
    
      <category term="mydumper" scheme="http://blog.taurendruid.com/tags/mydumper/"/>
    
      <category term="backup" scheme="http://blog.taurendruid.com/tags/backup/"/>
    
      <category term="restore" scheme="http://blog.taurendruid.com/tags/restore/"/>
    
      <category term="mysql" scheme="http://blog.taurendruid.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mydumper Install and Usage]]></title>
    <link href="http://blog.taurendruid.com/2014/12/27/mydumper-Install-and-Usage/"/>
    <id>http://blog.taurendruid.com/2014/12/27/mydumper-Install-and-Usage/</id>
    <published>2014-12-27T03:04:13.000Z</published>
    <updated>2014-12-28T08:02:49.000Z</updated>
    <content type="html"><![CDATA[<h3>Download</h3><br>Download the latest Mydumper verseion from <a href="https://launchpad.net/mydumper" target="_blank" rel="external">https://launchpad.net/mydumper</a><br>安装mydumper<br>Requirements<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CMake</div><div class="line">Glib2</div><div class="line">PCRE</div><div class="line">MySQL</div><div class="line"></div><div class="line">yum <span class="operator"><span class="keyword">install</span> cmake glib2-devel zlib-devel pcre-deve</span></div></pre></td></tr></table></figure><br><br>if your server did not install mysql-dev ,you should install mysql-devel<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="operator"><span class="keyword">install</span> -y mysql_devel</span></div></pre></td></tr></table></figure><br><br>optional:<br><br><code>python-sphinx</code><br><br>CMake:<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cmake .</div><div class="line"><span class="keyword">make</span> </div><div class="line"><span class="keyword">make</span> install</div></pre></td></tr></table></figure><br><br><pre><br>[root@DB mydumper-0.6.2]# cmake .<br>— Using mysql-config: /usr/bin/mysql_config<br>— Found MySQL: /usr/include/mysql, /usr/lib64/mysql/libmysqlclient_r.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so;/usr/lib64/librt.so;/usr/lib64/libdl.so<br>0<br>CMake Warning at docs/CMakeLists.txt:14 (message):<br>  Sphinx is older than v1.0, not building docs<br><br><br>— ————————————————————————<br>— MYSQL_CONFIG = /usr/bin/mysql_config<br>— CMAKE_INSTALL_PREFIX = /usr/local<br>— BUILD_DOCS = ON<br>— WITH_BINLOG = OFF<br>— RUN_CPPCHECK = OFF<br>— Change a values with: cmake -D<variable>=<value><br>— ————————————————————————<br>—<br>— Configuring done<br>— Generating done<br>— Build files have been written to: /data/mydumper-0.6.2<br><br></value></variable></pre><br><br>———————-<br>mydumper Usage:<br><br><pre><br>[root@DB mydumper-0.6.2]# mydumper —help<br>Usage:<br>  mydumper [OPTION…] multi-threaded MySQL dumping<br><br>Help Options:<br>  -?, —help                  Show help options<br><br>Application Options:<br>  -B, —database              Database to dump<br>  -T, —tables-list           Comma delimited table list to dump (does not exclude regex option)<br>  -o, —outputdir             Directory to output files to<br>  -s, —statement-size        Attempted size of INSERT statement in bytes, default 1000000<br>  -r, —rows                  Try to split tables into chunks of this many rows. This option turns off —chunk-filesize<br>  -F, —chunk-filesize        Split tables into chunks of this output file size. This value is in MB<br>  -c, —compress              Compress output files<br>  -e, —build-empty-files     Build dump files even if no data available from table<br>  -x, —regex                 Regular expression for ‘db.table’ matching<br>  -i, —ignore-engines        Comma delimited list of storage engines to ignore<br>  -m, —no-schemas            Do not dump table schemas with the data<br>  -k, —no-locks              Do not execute the temporary shared read lock.  WARNING: This will cause inconsistent backups<br>  —less-locking              Minimize locking time on InnoDB tables.<br>  -l, —long-query-guard      Set long query timer in seconds, default 60<br>  -K, —kill-long-queries     Kill long running queries (instead of aborting)<br>  -D, —daemon                Enable daemon mode<br>  -I, —snapshot-interval     Interval between each dump snapshot (in minutes), requires —daemon, default 60<br>  -L, —logfile               Log file name to use, by default stdout is used<br>  —tz-utc                    SET TIME_ZONE=’+00:00’ at top of dump to allow dumping of TIMESTAMP data when a server has data in different time zones or data is being moved between servers with different time zones, defaults to on use —skip-tz-utc to disable.<br>  —skip-tz-utc<br>  —use-savepoints            Use savepoints to reduce metadata locking issues, needs SUPER privilege<br>  —success-on-1146           Not increment error count and Warning instead of Critical in case of table doesn’t exist<br>  —lock-all-tables           Use LOCK TABLE for all, instead of FTWRL<br>  -h, —host                  The host to connect to<br>  -u, —user                  Username with privileges to run the dump<br>  -p, —password              User password<br>  -P, —port                  TCP/IP port to connect to<br>  -S, —socket                UNIX domain socket file to use for connection<br>  -t, —threads               Number of threads to use, default 4<br>  -C, —compress-protocol     Use compression on the MySQL connection<br>  -V, —version               Show the program version and exit<br>  -v, —verbose               Verbosity of output, 0 = silent, 1 = errors, 2 = warnings, 3 = info, default 2<br><br></pre><br><br><br><br>myloader Usage:<br><pre><br><br>[root@DB mydumper-0.6.2]# myloader —help<br>Usage:<br>  myloader [OPTION…] multi-threaded MySQL loader<br><br>Help Options:<br>  -?, —help                        Show help options<br><br>Application Options:<br>  -d, —directory                   Directory of the dump to import<br>  -q, —queries-per-transaction     Number of queries per transaction, default 1000<br>  -o, —overwrite-tables            Drop tables if they already exist<br>  -B, —database                    An alternative database to restore into<br>  -e, —enable-binlog               Enable binary logging of the restore data<br>  -h, —host                        The host to connect to<br>  -u, —user                        Username with privileges to run the dump<br>  -p, —password                    User password<br>  -P, —port                        TCP/IP port to connect to<br>  -S, —socket                      UNIX domain socket file to use for connection<br>  -t, —threads                     Number of threads to use, default 4<br>  -C, —compress-protocol           Use compression on the MySQL connection<br>  -V, —version                     Show the program version and exit<br>  -v, —verbose                     Verbosity of output, 0 = silent, 1 = errors, 2 = warnings, 3 = info, default 2<br><br></pre><br><h3>Troubleshoot</h3>

<p>[root@DB mydumper-0.6.2]# cmake .</p>
<p>— The CXX compiler identification is unknown</p>
<p>   CMake Error: your CXX compiler: “CMAKE_CXX_COMPILER-NOTFOUND” was not found.</p>
<p>   Please set CMAKE_CXX_COMPILER to a valid compiler path or name.</p>
<p>— Using mysql-config: /usr/bin/mysql_config</p>
<p>— Found MySQL: /usr/include/mysql, /usr/lib64/mysql/libmysqlclient_r.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so;/usr/lib64/librt.so;/usr/lib64/libdl.so</p>
<p>— checking for one of the modules ‘glib-2.0’</p>
<p>— checking for one of the modules ‘gthread-2.0’</p>
<p>— checking for module ‘libpcre’</p>
<p>— found libpcre, version 7.8</p>
<p>— Found PCRE: /usr/include</p>
<p>[root@DB mydumper-0.6.2]#  whereis c++<br>c++:<br>if result is null then </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">yum</span> <span class="comment">install</span> <span class="literal">-</span><span class="comment">y</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">c</span><span class="literal">+</span><span class="literal">+</span></div></pre></td></tr></table></figure>

<p>[root@DB mydumper-0.6.2]#  whereis c++<br>c++: /usr/bin/c++ /usr/include/c++</p>
]]></content>
    <summary type="html">
    <![CDATA[install mydumper on centos 6]]>
    
    </summary>
    
      <category term="mysql" scheme="http://blog.taurendruid.com/tags/mysql/"/>
    
      <category term="mydumper" scheme="http://blog.taurendruid.com/tags/mydumper/"/>
    
      <category term="centos" scheme="http://blog.taurendruid.com/tags/centos/"/>
    
      <category term="mysql" scheme="http://blog.taurendruid.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vagrant install]]></title>
    <link href="http://blog.taurendruid.com/2014/12/16/vagrant-install/"/>
    <id>http://blog.taurendruid.com/2014/12/16/vagrant-install/</id>
    <published>2014-12-16T08:08:58.000Z</published>
    <updated>2014-12-16T09:04:09.000Z</updated>
    <content type="html"><![CDATA[<h3 id="安装vagrant">安装vagrant</h3>
<p>vagrant 是基于virtualbox的，首先安装virtual vix<br>通过下面页面可以下载相关版本：</p>
<p><pre><br><a href="https://www.vagrantup.com/downloads" target="_blank" rel="external">https://www.vagrantup.com/downloads</a><br></pre><br>mac环境下，下载<a href="https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.1.dmg进行安装" target="_blank" rel="external">https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.1.dmg进行安装</a></p>
<h4 id="创建工程目录">创建工程目录</h4>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir flaskweb</div><div class="line"></div><div class="line"><span class="built_in">cd</span> flaskweb</div></pre></td></tr></table></figure>

<h5 id="添加box">添加box</h5>
<p>可以通过 <a href="https://vagrantcloud.com/discover/featured" target="_blank" rel="external">Vagrant Cloud website </a> 下载使用，默认下载到当前目录下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vagrant box add ubuntu/trusty64  <span class="comment">##默认添加到base</span></div><div class="line"></div><div class="line"><span class="comment">#####此处添加了一个本地box</span></div><div class="line">vagrant box add flaskweb centos65-x86_64-<span class="number">20140116</span>.box</div></pre></td></tr></table></figure>

<p>vagrant box command</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">vagrant box</div><div class="line">Usage: vagrant box &lt;subcommand&gt; [&lt;args&gt;]</div><div class="line"></div><div class="line">Available subcommands:</div><div class="line">     add</div><div class="line">     list</div><div class="line">     outdated</div><div class="line">     remove</div><div class="line">     repackage</div><div class="line">     update</div><div class="line"></div><div class="line"></div><div class="line">vagrant box list</div><div class="line">centos65 (virtualbox, <span class="number">0</span>)</div><div class="line">flaskweb (virtualbox, <span class="number">0</span>)</div></pre></td></tr></table></figure>

<h4 id="初始化vagrant_模板文件">初始化vagrant 模板文件</h4>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant init</div></pre></td></tr></table></figure>

<h4 id="配置vagrant">配置vagrant</h4>
<p>下载box后，我们需要告诉vagrant 当前项目中使用哪一个box,</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vi Vagrantfile</div><div class="line"></div><div class="line"><span class="comment"># Every Vagrant virtual environment requires a box to build off of.</span></div><div class="line">  config.vm.box = <span class="string">"base"</span></div><div class="line"></div><div class="line"><span class="comment"># Every Vagrant virtual environment requires a box to build off of.</span></div><div class="line">  config.vm.box = <span class="string">"flaskweb"</span></div></pre></td></tr></table></figure>

<p>虚拟机管理命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vagrant up <span class="comment">#启动</span></div><div class="line">vagrant reload <span class="comment">#修改Vagrantfile快速使之快速生效</span></div><div class="line">vagrant halt <span class="comment">#关闭</span></div><div class="line">vagrant suspend <span class="comment">#暂停</span></div><div class="line">vagrant resume <span class="comment">#恢复</span></div><div class="line">vagrant destroy <span class="comment">#删除</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[vagrant 安装配置]]>
    
    </summary>
    
      <category term="python" scheme="http://blog.taurendruid.com/tags/python/"/>
    
      <category term="vagrant" scheme="http://blog.taurendruid.com/tags/vagrant/"/>
    
      <category term="vagrant" scheme="http://blog.taurendruid.com/categories/vagrant/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Oracle Create DBLink]]></title>
    <link href="http://blog.taurendruid.com/2014/10/30/Oracle-Create-DBLink/"/>
    <id>http://blog.taurendruid.com/2014/10/30/Oracle-Create-DBLink/</id>
    <published>2014-10-30T07:48:43.000Z</published>
    <updated>2014-10-30T09:17:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="验证用户权限">验证用户权限</h2>
<h3 id="验证需要创建dblink用户的权限">验证需要创建dblink用户的权限</h3>
<p>1、首先确认用户有没有创建dblink的权限</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> user_sys_privs <span class="keyword">where</span> privilege <span class="keyword">like</span> </span></div><div class="line"><span class="keyword">upper</span>(<span class="string">'%DATABASE LINK%'</span>);</div></pre></td></tr></table></figure>

<p>如是没有权限，用管理员角色给用户</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">public</span> <span class="keyword">database</span> link <span class="keyword">to</span> &lt;username&gt;</span></div></pre></td></tr></table></figure>

<p><em>dblink有三种权限：</em><br><strong>CREATE DATABASE LINK; — 私有dblink</strong><br><strong>CREATE PUBLIC DATABASE LINK; — 所有用户可以使用</strong><br><strong>DROP PUBLIC DATABASE LINK; — 删除dblink</strong></p>
<h3 id="配置tns">配置tns</h3>
<p>在$ORACLE_HOME/network/admin/tnsname.org中添加tns</p>
<h3 id="创建dblink">创建dblink</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> link &lt;dblink name&gt; <span class="keyword">connect</span> <span class="keyword">to</span> &lt;username&gt; </span></div><div class="line"><span class="keyword">identified</span> <span class="keyword">by</span> &lt;<span class="keyword">password</span>&gt; <span class="keyword">using</span> <span class="string">'&lt;tns name&gt;'</span>;</div></pre></td></tr></table></figure>

<h3 id="查询数据">查询数据</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="keyword">*</span> from <span class="variable">&lt;table_name&gt;</span><span class="comment">@&lt;dblink name&gt;;</span></div></pre></td></tr></table></figure>

<h3 id="注意：">注意：</h3>
<p></p><p><br>    DBlink 使用很简单 ，但是在使用中会出现锁，每次查询时会数据库会创建一个连接，dblink一般不会自动释放，如果大量dblink查询，可能会导致系统无法正常运行。</p>
]]></content>
    <summary type="html">
    <![CDATA[oracle 通过创建dblink 轻松实现跨库查询。]]>
    
    </summary>
    
      <category term="dblink" scheme="http://blog.taurendruid.com/tags/dblink/"/>
    
      <category term="oracle" scheme="http://blog.taurendruid.com/tags/oracle/"/>
    
      <category term="oracle" scheme="http://blog.taurendruid.com/categories/oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux下安装微软雅黑字体]]></title>
    <link href="http://blog.taurendruid.com/2014/09/18/linux-fonts-install/"/>
    <id>http://blog.taurendruid.com/2014/09/18/linux-fonts-install/</id>
    <published>2014-09-18T06:34:17.000Z</published>
    <updated>2014-12-27T09:38:13.000Z</updated>
    <content type="html"><![CDATA[<p>   将win7中得到字体文件，并把字体文件放到到/usr/share/fonts/zh_CN文件夹中：</p>
<p>　</p>
<p>　　系统构建字体文件并刷新字体缓存</p>
<p>　　</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　<span class="comment">#mkfontscale</span></div><div class="line"></div><div class="line">　　<span class="comment">#mkfontdir</span></div><div class="line"></div><div class="line">　　<span class="comment">#fc-cache -fv</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[Linux下安装微软雅黑字体]]>
    
    </summary>
    
      <category term="fonts" scheme="http://blog.taurendruid.com/tags/fonts/"/>
    
      <category term="linux" scheme="http://blog.taurendruid.com/tags/linux/"/>
    
      <category term="Linux" scheme="http://blog.taurendruid.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HEXO 介绍]]></title>
    <link href="http://blog.taurendruid.com/2014/09/10/hello-world/"/>
    <id>http://blog.taurendruid.com/2014/09/10/hello-world/</id>
    <published>2014-09-10T06:34:17.000Z</published>
    <updated>2014-10-30T08:28:41.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
